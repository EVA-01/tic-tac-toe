// Generated by CoffeeScript 1.7.1
var game;

game = {
  getBoardValues: function() {
    return [[$("#game-box-00").data("content"), $("#game-box-10").data("content"), $("#game-box-20").data("content")], [$("#game-box-01").data("content"), $("#game-box-11").data("content"), $("#game-box-21").data("content")], [$("#game-box-02").data("content"), $("#game-box-12").data("content"), $("#game-box-22").data("content")]];
  },
  clearBoard: function() {
    $("#game td").each(function() {
      $(this).data("content", "").html("&nbsp;").addClass("empty");
    });
  },
  makeMove: function(where, value, prefix) {
    var w;
    if (prefix == null) {
      prefix = true;
    }
    w = prefix === true ? "#game-box-" + where : where;
    $(w).data("content", value).html(value === "" ? "&nbsp;" : value);
    if (value === "") {
      $(w).addClass("empty");
    }
    if (value !== "") {
      $(w).removeClass("empty");
    }
    this.nextRound();
  },
  ai: function(protagonist, antagonist) {
    var move;
    move = TicTacToeAI.getOptimum(this.getBoardValues(), protagonist, antagonist);
    if (move !== false) {
      this.makeMove(move, protagonist);
    }
  },
  human: function(protagonist) {
    $("#game").addClass("selecting");
  },
  player1: true,
  player2: false,
  turn: false,
  bench: false,
  x: false,
  o: false,
  getMark: function(who) {
    if (this.x === who) {
      return "X";
    } else {
      return "O";
    }
  },
  isComputer: function(p) {
    if (p === "Player One") {
      return !this.player1;
    } else {
      return !this.player2;
    }
  },
  displayMessage: function(msg, top) {
    var where;
    if (top == null) {
      top = true;
    }
    where = top === true ? "#content-top" : "#content-bottom";
    if (msg !== "") {
      if ($("" + where + " span").length !== 0) {
        $("" + where + " span").stop(true, true).fadeOut(function() {
          $(where).html("<span style='display:none'>" + msg + "</span>");
          $("" + where + " span").fadeIn();
        });
      } else {
        $(where).html("<span style='display:none'>" + msg + "</span>");
        $("" + where + " span").fadeIn();
      }
    } else {
      if ($("" + where + " span").length !== 0) {
        $("" + where + " span").stop(true, true).fadeOut(function() {
          $(this).remove();
        });
      }
    }
  },
  nextRound: function() {
    var status;
    status = TicTacToeAI.checkGame(this.getBoardValues());
    switch (status.status) {
      case "P":
        this.select();
        break;
      case "D":
        this.draw();
        break;
      case "X":
      case "O":
        this.winner(status);
    }
  },
  draw: function() {
    $("#game").removeClass("selecting");
    this.displayMessage("Draw");
    this.displayMessage("<button>New game</button>", false);
  },
  winner: function(status) {
    var box, who, _i, _len, _ref;
    $("#game").removeClass("selecting");
    who = this[status.status.toLowerCase()];
    _ref = status.why;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      box = _ref[_i];
      $("#game-box-" + box).addClass("won");
    }
    this.displayMessage(who + " Won");
    return this.displayMessage("<button>New game</button>", false);
  },
  select: function(s) {
    var _ref;
    if (s == null) {
      s = true;
    }
    if (s === true) {
      _ref = [this.bench, this.turn], this.turn = _ref[0], this.bench = _ref[1];
    }
    this.displayMessage(this.turn);
    if (this.isComputer(this.turn)) {
      $("#game").removeClass("selecting");
      this.ai(this.getMark(this.turn), this.getMark(this.bench));
    }
    if (!this.isComputer(this.turn)) {
      this.human(this.getMark(this.turn));
    }
  },
  init: function() {
    $("#player-slide").slideUp(function() {
      $("#game-slide").slideDown(function() {
        game.turn = ["Player One", "Player Two"].random();
        game.bench = game.turn === "Player One" ? "Player Two" : "Player One";
        game.x = game.turn;
        game.o = game.bench;
        game.select(false);
      });
    });
  },
  startOver: function() {
    this.displayMessage("");
    this.displayMessage("", false);
    this.clearBoard();
    $("#game td.won").removeClass("won");
    $("#game-slide").slideUp(function() {
      $("#player-slide").slideDown();
    });
  }
};

$(document).ready(function() {
  $("#player-slide li").click(function() {
    var id;
    id = $(this).attr('id');
    switch (id) {
      case "one-computer":
        game.player1 = false;
        break;
      case "one-human":
        game.player1 = true;
        break;
      case "two-computer":
        game.player2 = false;
        break;
      case "two-human":
        game.player2 = true;
    }
    $(this).parents("ul").find(".active").removeClass("active");
    $(this).addClass("active");
  });
  $("#player-slide button").click(function() {
    game.init();
  });
  $(document).on("click", "#content-bottom button", function() {
    game.startOver();
  });
  $(document).on("click", "#game.selecting .empty", function() {
    game.makeMove("#" + $(this).attr("id"), game.getMark(game.turn), false);
  });
});
